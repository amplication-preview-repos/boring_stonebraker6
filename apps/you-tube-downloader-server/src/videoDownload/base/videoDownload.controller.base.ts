/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoDownloadService } from "../videoDownload.service";
import { VideoDownloadCreateInput } from "./VideoDownloadCreateInput";
import { VideoDownload } from "./VideoDownload";
import { VideoDownloadFindManyArgs } from "./VideoDownloadFindManyArgs";
import { VideoDownloadWhereUniqueInput } from "./VideoDownloadWhereUniqueInput";
import { VideoDownloadUpdateInput } from "./VideoDownloadUpdateInput";

export class VideoDownloadControllerBase {
  constructor(protected readonly service: VideoDownloadService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoDownload })
  async createVideoDownload(
    @common.Body() data: VideoDownloadCreateInput
  ): Promise<VideoDownload> {
    return await this.service.createVideoDownload({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoDownload] })
  @ApiNestedQuery(VideoDownloadFindManyArgs)
  async videoDownloads(
    @common.Req() request: Request
  ): Promise<VideoDownload[]> {
    const args = plainToClass(VideoDownloadFindManyArgs, request.query);
    return this.service.videoDownloads({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoDownload })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoDownload(
    @common.Param() params: VideoDownloadWhereUniqueInput
  ): Promise<VideoDownload | null> {
    const result = await this.service.videoDownload({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoDownload })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoDownload(
    @common.Param() params: VideoDownloadWhereUniqueInput,
    @common.Body() data: VideoDownloadUpdateInput
  ): Promise<VideoDownload | null> {
    try {
      return await this.service.updateVideoDownload({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoDownload })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoDownload(
    @common.Param() params: VideoDownloadWhereUniqueInput
  ): Promise<VideoDownload | null> {
    try {
      return await this.service.deleteVideoDownload({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
